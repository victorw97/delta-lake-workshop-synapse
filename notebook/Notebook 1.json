{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "deltaPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "59e0f841-f3f5-4d45-bb6e-25b36f85ee01"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e42d8991-f8c7-4f58-9347-b47e5e6da7eb/resourceGroups/rg_delta_workshop/providers/Microsoft.Synapse/workspaces/delta-ws-workspace/bigDataPools/deltaPool",
				"name": "deltaPool",
				"type": "Spark",
				"endpoint": "https://delta-ws-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/deltaPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# PySpark Delta Lake Configuration\n",
					"from pyspark.sql.functions import col, when\n",
					"from delta.tables import *"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"parquet_path = \"abfss://raw@deltawsstorage.dfs.core.windows.net/victor_house_prices/house_price_sample.parquet\"\n",
					"parquet_df = spark.read.parquet(parquet_path)\n",
					"\n",
					"display(parquet_df)\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# write to Delta Lake \n",
					"delta_path = \"abfss://raw@deltawsstorage.dfs.core.windows.net/victor_house_prices/house_price_delta\"\n",
					"parquet_df.write \\\n",
					"    .format(\"delta\") \\\n",
					"    .save(delta_path)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Open Delta Table\n",
					"delta_table = DeltaTable.forPath(spark, delta_path)\n",
					"\n",
					"\n",
					"new_houses = spark.createDataFrame([\n",
					"    (12342342, 7420, 4, 5, 5, 'no', 'no', 'no', 'no', 'no', 3, 'no', 'semi-furnished'),\n",
					"    (239403, 7420, 4, 5, 5, 'yes', 'no', 'no', 'no', 'no', 3, 'no', 'semi-furnished')\n",
					"    ], ['price', 'area', 'bedrooms', 'bathrooms', 'stories', 'mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'parking', 'prefarea', 'furnishingstatus'\n",
					"])\n",
					"\n",
					"delta_table.alias('old').merge(new_houses.alias('new'), 'old.price = new.price').whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.format(\"delta\").load(delta_path)\n",
					"display(df)"
				],
				"execution_count": 19
			}
		]
	}
}